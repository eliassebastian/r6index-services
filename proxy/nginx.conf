worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 1024;
}

http {
    # hide server info
    server_tokens off;

    # Enable gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/json;
    gzip_disable "MSIE [1-6]\.";

    server {
        listen 80;
        listen [::]:80;
        server_name api.r6index.app;

        include /etc/nginx/snippets/certbot-webroot.conf;

        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl http2; #ssl;
        # listen [::]:443 ssl ipv6only=on;
        server_name api.r6index.app;

        include /etc/nginx/snippets/ssl.conf;
        # include /etc/nginx/snippets/certbot-webroot.conf;

        ssl_certificate /etc/nginx/ssl/live/api.r6index.app/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/live/api.r6index.app/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/live/api.r6index.app/chain.pem;

        location /v1/ {
            resolver 127.0.0.11 valid=30s;

            proxy_set_header    Host $host;
            proxy_set_header    X-Forwarded-For $remote_addr;
            proxy_set_header    X-Real-IP $remote_addr;
            proxy_set_header    X-Forwarded-Proto $scheme;
            proxy_buffering     off;

            location /v1/health {
                proxy_pass          http://api_service:8080/v1/ping;
            }

            location /v1/index {
                proxy_pass          http://api_service:8080/v1/index;
            }

            location /v1/update {
                proxy_pass          http://api_service:8080/v1/update;
            }

            location /v1/search {
                proxy_pass          http://api_service:8080/v1/search;
            }

            location /v1/player {
                proxy_pass          http://api_service:8080/v1/player;
            }

            return 404;
        }

        error_page 404 = @400;
        location @400 { return 400 '{"status":400,"message":"Bad request"}\n'; }
        proxy_intercept_errors on;     # Do not send backend errors to client
        default_type application/json; # If no content-type, assume JSON
    }
}
